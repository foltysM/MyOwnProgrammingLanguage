2021-05-08 13:04:52:486 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Dwunasta (RULES (RULE prog (BLOCK (ALT start))) (RULE start (BLOCK (ALT (* (BLOCK (ALT (BLOCK (ALT expr SEMICOLON))) (ALT function)))))) (RULE expr (BLOCK (ALT LOOP_BEGIN repetitions start LOOP_END) (ALT IF equal THEN blockif ENDIF) (ALT ID ASSIGN math_stmnt) (ALT PRINT ID LEFT_SQ_BRCKT INT RIGHT_SQ_BRCKT) (ALT ID ASSIGN STRING) (ALT PRINT ID) (ALT READ ID) (ALT ID))) (RULE function (BLOCK (ALT BEGINFUNCTION fparam fblock ENDFUNCTION))) (RULE blockif (BLOCK (ALT start))) (RULE math_stmnt (BLOCK (ALT value) (ALT value ADD value) (ALT value SUB value))) (RULE equal (BLOCK (ALT ID '==' INT))) (RULE repetitions (BLOCK (ALT INT))) (RULE value (BLOCK (ALT INT) (ALT REAL) (ALT '"' str '"') (ALT ARRAY) (ALT CASTINT value) (ALT CASTREAL value) (ALT '(' math_stmnt ')') (ALT ID))) (RULE str (BLOCK (ALT STRING))) (RULE fparam (BLOCK (ALT ID))) (RULE fblock (BLOCK (ALT (* (BLOCK (ALT expr SEMICOLON)))))) (RULE IF (BLOCK (ALT 'if'))) (RULE ENDIF (BLOCK (ALT 'endif'))) (RULE THEN (BLOCK (ALT 'then'))) (RULE BEGINFUNCTION (BLOCK (ALT 'beginf'))) (RULE LOOP_BEGIN (BLOCK (ALT 'loop'))) (RULE LOOP_END (BLOCK (ALT 'endloop'))) (RULE ENDFUNCTION (BLOCK (ALT 'endf'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE LEFT_SQ_BRCKT (BLOCK (ALT '['))) (RULE RIGHT_SQ_BRCKT (BLOCK (ALT ']'))) (RULE READ (BLOCK (ALT 'scan'))) (RULE ARRAY (BLOCK (ALT '[' (+ (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))) (? (BLOCK (ALT ',')))))) ']'))) (RULE CASTINT (BLOCK (ALT '(int)'))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE CASTREAL (BLOCK (ALT '(real)'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT (.. 'a' 'z')) (ALT (.. 'A' 'Z'))))))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))) '.' (+ (BLOCK (ALT (.. '0' '9'))))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9'))))))) (RULE ADD (BLOCK (ALT '+'))) (RULE SEMICOLON (BLOCK (ALT ';'))) (RULE SUB (BLOCK (ALT '-'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '\\' '"'))))) '"'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-05-08 13:04:52:499 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Dwunasta (RULES (RULE prog (BLOCK (ALT start))) (RULE start (BLOCK (ALT (* (BLOCK (ALT (BLOCK (ALT expr SEMICOLON))) (ALT function)))))) (RULE expr (BLOCK (ALT LOOP_BEGIN repetitions start LOOP_END) (ALT IF equal THEN blockif ENDIF) (ALT ID ASSIGN math_stmnt) (ALT PRINT ID LEFT_SQ_BRCKT INT RIGHT_SQ_BRCKT) (ALT ID ASSIGN STRING) (ALT PRINT ID) (ALT READ ID) (ALT ID))) (RULE function (BLOCK (ALT BEGINFUNCTION fparam fblock ENDFUNCTION))) (RULE blockif (BLOCK (ALT start))) (RULE math_stmnt (BLOCK (ALT value) (ALT value ADD value) (ALT value SUB value))) (RULE equal (BLOCK (ALT ID '==' INT))) (RULE repetitions (BLOCK (ALT INT))) (RULE value (BLOCK (ALT INT) (ALT REAL) (ALT '"' str '"') (ALT ARRAY) (ALT CASTINT value) (ALT CASTREAL value) (ALT '(' math_stmnt ')') (ALT ID))) (RULE str (BLOCK (ALT STRING))) (RULE fparam (BLOCK (ALT ID))) (RULE fblock (BLOCK (ALT (* (BLOCK (ALT expr SEMICOLON)))))) (RULE IF (BLOCK (ALT 'if'))) (RULE ENDIF (BLOCK (ALT 'endif'))) (RULE THEN (BLOCK (ALT 'then'))) (RULE BEGINFUNCTION (BLOCK (ALT 'beginf'))) (RULE LOOP_BEGIN (BLOCK (ALT 'loop'))) (RULE LOOP_END (BLOCK (ALT 'endloop'))) (RULE ENDFUNCTION (BLOCK (ALT 'endf'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE LEFT_SQ_BRCKT (BLOCK (ALT '['))) (RULE RIGHT_SQ_BRCKT (BLOCK (ALT ']'))) (RULE READ (BLOCK (ALT 'scan'))) (RULE ARRAY (BLOCK (ALT '[' (+ (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))) (? (BLOCK (ALT ',')))))) ']'))) (RULE CASTINT (BLOCK (ALT '(int)'))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE CASTREAL (BLOCK (ALT '(real)'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT (SET (.. 'a' 'z') (.. 'A' 'Z')))))))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))) '.' (+ (BLOCK (ALT (.. '0' '9'))))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9'))))))) (RULE ADD (BLOCK (ALT '+'))) (RULE SEMICOLON (BLOCK (ALT ';'))) (RULE SUB (BLOCK (ALT '-'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '\\' '"'))))) '"'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-05-08 13:04:52:513 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Dwunasta (RULES (RULE prog (BLOCK (ALT start))) (RULE start (BLOCK (ALT (* (BLOCK (ALT (BLOCK (ALT expr SEMICOLON))) (ALT function)))))) (RULE expr (BLOCK (ALT LOOP_BEGIN repetitions start LOOP_END) (ALT IF equal THEN blockif ENDIF) (ALT ID ASSIGN math_stmnt) (ALT PRINT ID LEFT_SQ_BRCKT INT RIGHT_SQ_BRCKT) (ALT ID ASSIGN STRING) (ALT PRINT ID) (ALT READ ID) (ALT ID))) (RULE function (BLOCK (ALT BEGINFUNCTION fparam fblock ENDFUNCTION))) (RULE blockif (BLOCK (ALT start))) (RULE math_stmnt (BLOCK (ALT value) (ALT value ADD value) (ALT value SUB value))) (RULE equal (BLOCK (ALT ID '==' INT))) (RULE repetitions (BLOCK (ALT INT))) (RULE value (BLOCK (ALT INT) (ALT REAL) (ALT '"' str '"') (ALT ARRAY) (ALT CASTINT value) (ALT CASTREAL value) (ALT '(' math_stmnt ')') (ALT ID))) (RULE str (BLOCK (ALT STRING))) (RULE fparam (BLOCK (ALT ID))) (RULE fblock (BLOCK (ALT (* (BLOCK (ALT expr SEMICOLON))))))))
2021-05-08 13:04:52:513 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR DwunastaLexer (RULES (RULE T__0 (BLOCK (ALT '=='))) (RULE T__1 (BLOCK (ALT '"'))) (RULE T__2 (BLOCK (ALT '('))) (RULE T__3 (BLOCK (ALT ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ENDIF (BLOCK (ALT 'endif'))) (RULE THEN (BLOCK (ALT 'then'))) (RULE BEGINFUNCTION (BLOCK (ALT 'beginf'))) (RULE LOOP_BEGIN (BLOCK (ALT 'loop'))) (RULE LOOP_END (BLOCK (ALT 'endloop'))) (RULE ENDFUNCTION (BLOCK (ALT 'endf'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE LEFT_SQ_BRCKT (BLOCK (ALT '['))) (RULE RIGHT_SQ_BRCKT (BLOCK (ALT ']'))) (RULE READ (BLOCK (ALT 'scan'))) (RULE ARRAY (BLOCK (ALT '[' (+ (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))) (? (BLOCK (ALT ',')))))) ']'))) (RULE CASTINT (BLOCK (ALT '(int)'))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE CASTREAL (BLOCK (ALT '(real)'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT (SET (.. 'a' 'z') (.. 'A' 'Z')))))))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))) '.' (+ (BLOCK (ALT (.. '0' '9'))))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9'))))))) (RULE ADD (BLOCK (ALT '+'))) (RULE SEMICOLON (BLOCK (ALT ';'))) (RULE SUB (BLOCK (ALT '-'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '\\' '"'))))) '"'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2021-05-08 13:04:52:651 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, IF=5, ENDIF=6, THEN=7, BEGINFUNCTION=8, LOOP_BEGIN=9, LOOP_END=10, ENDFUNCTION=11, PRINT=12, LEFT_SQ_BRCKT=13, RIGHT_SQ_BRCKT=14, READ=15, ARRAY=16, CASTINT=17, ASSIGN=18, CASTREAL=19, ID=20, REAL=21, INT=22, ADD=23, SEMICOLON=24, SUB=25, STRING=26, WS=27}
2021-05-08 13:04:52:651 semantics LogManager.java:25 strings={'=='=1, '"'=2, '('=3, ')'=4, 'if'=5, 'endif'=6, 'then'=7, 'beginf'=8, 'loop'=9, 'endloop'=10, 'endf'=11, 'print'=12, '['=13, ']'=14, 'scan'=15, '(int)'=17, '='=18, '(real)'=19, '+'=23, ';'=24, '-'=25}
2021-05-08 13:04:52:655 LL1 LogManager.java:25 
DECISION 0 in rule start
2021-05-08 13:04:52:655 LL1 LogManager.java:25 look=[{5, 9, 12, 15, 20}, 8]
2021-05-08 13:04:52:655 LL1 LogManager.java:25 LL(1)? true
2021-05-08 13:04:52:655 LL1 LogManager.java:25 
DECISION 1 in rule start
2021-05-08 13:04:52:655 LL1 LogManager.java:25 look=[{5, 8..9, 12, 15, 20}, {<EOF>, 6, 10}]
2021-05-08 13:04:52:655 LL1 LogManager.java:25 LL(1)? true
2021-05-08 13:04:52:655 LL1 LogManager.java:25 
DECISION 2 in rule expr
2021-05-08 13:04:52:655 LL1 LogManager.java:25 look=[9, 5, 20, 12, 20, 12, 15, 20]
2021-05-08 13:04:52:656 LL1 LogManager.java:25 LL(1)? false
2021-05-08 13:04:52:656 LL1 LogManager.java:25 
DECISION 3 in rule math_stmnt
2021-05-08 13:04:52:656 LL1 LogManager.java:25 look=[{2..3, 16..17, 19..22}, {2..3, 16..17, 19..22}, {2..3, 16..17, 19..22}]
2021-05-08 13:04:52:656 LL1 LogManager.java:25 LL(1)? false
2021-05-08 13:04:52:656 LL1 LogManager.java:25 
DECISION 4 in rule value
2021-05-08 13:04:52:656 LL1 LogManager.java:25 look=[22, 21, 2, 16, 17, 19, 3, 20]
2021-05-08 13:04:52:656 LL1 LogManager.java:25 LL(1)? true
2021-05-08 13:04:52:656 LL1 LogManager.java:25 
DECISION 5 in rule fblock
2021-05-08 13:04:52:656 LL1 LogManager.java:25 look=[{5, 9, 12, 15, 20}, 11]
2021-05-08 13:04:52:656 LL1 LogManager.java:25 LL(1)? true
